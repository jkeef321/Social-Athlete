// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.socialathlete.domain;

import com.socialathlete.domain.SAUser;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SAUser_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager SAUser.entityManager;
    
    public static final EntityManager SAUser.entityManager() {
        EntityManager em = new SAUser().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SAUser.countSAUsers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SAUser o", Long.class).getSingleResult();
    }
    
    public static List<SAUser> SAUser.findAllSAUsers() {
        return entityManager().createQuery("SELECT o FROM SAUser o", SAUser.class).getResultList();
    }
    
    public static SAUser SAUser.findSAUser(Long id) {
        if (id == null) return null;
        return entityManager().find(SAUser.class, id);
    }
    
    public static List<SAUser> SAUser.findSAUserEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SAUser o", SAUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void SAUser.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SAUser.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SAUser attached = SAUser.findSAUser(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SAUser.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SAUser.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SAUser SAUser.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SAUser merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
